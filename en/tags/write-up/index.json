[{"content":"Federated learning It is decentralized machine learning, where the server sends the initialization model to the clients, then the client uses the global model to train with their own data and then their local model onto the server. The server will aggregate these local models using the aggregation algorithm.\nH√¨nh 1:\rFederated learning diagram\rIn my project Model: using MLP 2-layer (115,2) algorithm for training model\nAggregation algorithm at server: FedAVG (recipe below)\nDataset: NBaIoT dataset from 9 IoT devices contains data of 2 labels (benign, attack). I split dataset to 40 clients, each client has 10000 data, ratio of benign data and attack data is random (so, it\u0026rsquo;s is IID dataset). Result After running federated learning 40 rounds, the result is below.\nSource code project at Colab\n","description":"Malware is general, specifically botnets caused by malicious code.","id":0,"section":"posts","tags":["thunebae","project"],"title":"Using Federated learning for detecting malware in IoT network context.","uri":"https://thunebae.github.io/en/posts/fedmalware/"},{"content":"Framework: Django with python Idea: Create a website to manage F0 patient at home (This project was created when my team must study at home because of Social distancing during covid epidemic)\nFeature: ‚ö†Ô∏èWARNING: CarePlus has many bugs, omissions, incomplete functions. But my team has too lazy to fix and complete it\rFor all users: sign in, log out, edit profile (edit picture profile), health declaration\nH√¨nh 1:\rUpdate profile\rOnly for doctor: add patient by identity card number (it\u0026rsquo;s only show in patient profile and only doctor knows it), classify patient (warning level: blue (it\u0026rsquo;s fine. Patient can be take care at home), yellow, red(they must let patient go to hospital emergently)), symptom monitoring online by updates of patient or patient\u0026rsquo;s relative and write prescriptions for specific patients.\nH√¨nh 2:\rPatient management\rOnly for patient: symptom update, edit medical records (background disease, date of illness, place of travel), view today\u0026rsquo;s prescription\nH√¨nh 3:\rOnly for patient\rOnly for admin: take an normal user account became doctor account by edit type_account\nH√¨nh 4:\rOnly for admin\rSome feature by my teammate do: forum, covid statistics, news, notifications\nH√¨nh 5:\rOthers\rSource code project at Github\n","description":"A website for F0 patient management at Home üè•","id":1,"section":"posts","tags":["thunebae","project"],"title":"CarePlus","uri":"https://thunebae.github.io/en/posts/careplus/"},{"content":"Framework: Python with PyQt5-tools Idea It\u0026rsquo;s application just for demo (without communication through internet). For the purpose of preventing scores from leaking at server, we use AES-128 mode CBC to encrypt the data of the database and the AES key will be encrypted and exchanged by ECC.\nImplement H√¨nh 1:\rUEIIS project graph\rWhen a teacher or student logs in, the public key will be downloaded from the server and use for decrypting ciphertext to score table.\nWhen the teacher adds, deletes, edits grades, the program will automatically generate a new key pair including private-key and public-key respectively to encrypt the edited data.\nCiphertext stored on the server makes it easy for the server to encrypt or decrypt the transcript data (encrypted with AES) after verifying the user\u0026rsquo;s identity with the private-key.\nH√¨nh 2:\rTeacher UI\rSource code project at Github\n","description":"When ECC meets AES-128-CBC üòÉ","id":2,"section":"posts","tags":["thunebae","project"],"title":"ECC Aplication","uri":"https://thunebae.github.io/en/posts/eccapp/"},{"content":"Framework: pefile python Ex1 - File Infecting Virus üìë CHALL 1: Add a new sectiion in pe file or use .reloc section to contain virus (Simple MessageBox). When program start, call virus first and program run normally.\rHonestly it\u0026rsquo;s not a virus, it\u0026rsquo;s not contagious. It\u0026rsquo;s just an experiment on inject pe file. Maybe If I has more time to do, I think I can make it\u0026hellip;umh contagiousüò≥\nüìë CHALL 2: Call hijacking - Like challenge before, but somewhere call instruction in .text section is overwrited by call virus but the program still run normally\rI scan all pe file with opcode E8 (opcode of call instruction) start AddressOfEntryPoint (make sure program must run over this instruction), so I pick a first call instruction and overwrite it\u0026rsquo;s call_offset by virus_offset. After execute MessageBox, we need an instruction to call back a function with call_offset overwrited.\nProblem: need to save registers before execute MessageBox and restore registers to make everything right with an overwrited call after execute MessageBox.\nYou can see ource code and more detail by view report assignment at Github\nEx1 - Advanced Virus Techniques 1. Simple XOR-decryptor virus. Simple MessageBox shellcode encrypted store in new section and decryptor locates in other section. When program start run, call decryptor first (AddressOfEntryPoint), decrypt ciphertext and call plaintext shellcode. After all, call old AddressOfEntryPoint that make program run normally.\n0 1 2 3 4 5 6 7 8 9 10 11 12 .virus: 01020000 .decryptor: 0101F000 .entry-point: 01012475 lea esi, [0x01020000] mov ecx, 0x128 xor [esi], ecx xor [esi], esi add esi, 4 sub ecx, 4 cmp ecx, 0 jnz 0xFFFFFFED call 0x00000FDD 2. Anti-debugging üìë METHOD 1: Use BeingDebugged in PEB structure at fs:[30] + 2\rBeingDebugged = 0: don\u0026rsquo;t detect debugger, jump decryptor.\nBeingDebugged # 0: detect debugger, don\u0026rsquo;t decrypt ciphertext, (call old AddressOfEntryPoint)\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 mov eax, fs:[0x30] xor ebx, ebx mov bl, [eax+2] test bl, bl jz 0X0000001E mov eax, 01012475 call eax lea esi, [virus] mov ecx, 0x128 xor [esi], ecx xor [esi], esi add esi, 4 sub ecx, 4 cmp ecx, 0 jnz virus call OldEntryPoint It\u0026rsquo;s maybe fool by edit register store values fs:[30] + 2 to 0 in debugger üòï. So it\u0026rsquo;s just experiment, I can\u0026rsquo;t think more.\nüìë METHOD 2: Windows API ‚Äì IsDebuggerPresent()\rI was written a C++ program to compile shellcode to call IsDebuggerPresent() by using offset of this API call in it\u0026rsquo;s library - kernell32.dll, compile to assembly, edit something, export to .exe file and copy shellcode to my target inject PE file. You can see how to do it at Writing and Compiling Shellcode in C\neax = 0: run the following instruction, program run normally.\neax # 3, decryptor decrypt section .virus, call MessageBox and call old AddressOfEntryPoint.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 call IsDebuggerPresent() cmp eax, 0x3 jnz 0x7 mov eax, OldEntryPoint call eax lea esi, [virus] mov ecx, 0x128 xor [esi], ecx xor [esi], esi add esi, 4 sub ecx, 4 cmp ecx, 0 jnz virus call OldEntryPoint 3. Anti-VM üìë METHOD 1: CPUID instruction\rEasy method to implement but also easy to fool it\nCPUID instruction is the command to check the processor information. With input eax=1, if the 31st bit of the ecx output is 1, the application is in a virtual machine environment.\nHow to fool this method? One can configure in the .vmx file to change the ecx output if input eax=1 in the VMWare virtual machine. So you can bypass this check.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 xor eax, eax inc eax cpuid bt ecx, 0x1f jb 0x23 lea esi, [virus] mov ecx, 0x128 xor [esi], ecx xor [esi], esi add esi, 4 sub ecx, 4 cmp ecx, 0 jnz virus call 0x00000FD2 mov eax, OldEntryPoint call eax üìë METHOD 2: IN instruction\rWhen I do this method, I think I will give up because fcking SEH is not working but luckily, it works, but only for calc.exe :\u0026laquo;\nIN tutorial is use a read a port, at here port to read is port 0x5658 - ‚ÄòVX‚Äô. It requires SEH to handle exception because if VMWare not running, port isn\u0026rsquo;t openning, so nothing can\u0026rsquo;t be read and a execute_exception_handler occurs. So we need something like \u0026ldquo;try\u0026hellip;except\u0026rdquo; and SEH is a structure management it.\nH√¨nh 1:\rIN instruction\rYou can see ource code and more detail by view report assignment at Github\n","description":"Some experiment demo with everything that I study in school. Simple, unrealistic but I spend a lot of time on it. ","id":3,"section":"posts","tags":["thunebae","project"],"title":"Malware assignment","uri":"https://thunebae.github.io/en/posts/malware/"},{"content":"\rFeature H√¨nh 1:\rFeature of Paint Collaborator\rImplement H√¨nh 1:\rDraw\rH√¨nh 2:\rAdd picture\rH√¨nh 3:\rShape, line and color\rH√¨nh 4:\rPaint Collaborator for 4 clients\rSource code project at Github\n","description":"An application created by C# and .NET framework.","id":4,"section":"posts","tags":["thunebae","project"],"title":"Paint Collaborator","uri":"https://thunebae.github.io/en/posts/paintcollab/"},{"content":"Introduction Umh\u0026hellip;TechBlog is Technology plus Blog, so everybody can write and share their knowledges in this website\nServer: Linux‚Äã\nLAMP stack: Apache2, PHP, Mysql‚Äã\nMVC Framework‚Äã\nProgram languages: PHP, HTML\nFeature Register, log in, log out, update profile\nCreate, update, delete, view posts, pagination\nComment, count views\nUpload images\nH√¨nh 1:\rHome UI\rSecurity method Prepared statement: prevent SQL injection\nSANITIZE INPUT PHP: prevent XSS\nMode_rewrite: protect resources, prevent directory traversal\nSafe upload file: limit size of upload images, check MIME type\nModSec firewall: use OWASP\u0026rsquo;s rules that can prevent TOP 10 OWASP\nH√¨nh 2:\rSecurity method used for TechBlog\rSource code project at Github\n","description":"A website too but it has some security method.","id":5,"section":"posts","tags":["thunebae","project"],"title":"TechBlog","uri":"https://thunebae.github.io/en/posts/techblog/"},{"content":"1. No strings S·ª≠ d·ª•ng IDAPro 64-bit disassembly ra ƒëo·∫°n m√£ gi·∫£ b√™n d∆∞·ªõi, ta th·∫•y ƒë∆∞·ª£c d√≤ng s·ªë 9 l√† nh·∫≠p v√†o m·ªôt chu·ªói m√† chu·ªói n√†y ch√≠nh l√† flag c·∫ßn t√¨m.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+Ch] [rbp-64h] char s[72]; // [rsp+10h] [rbp-60h] BYREF unsigned __int64 v6; // [rsp+58h] [rbp-18h] v6 = __readfsqword(0x28u); printf(\u0026#34;flag? \u0026#34;); fgets(s, 70, stdin); for ( i = 0; i \u0026lt; strlen(s) - 1; ++i ) { if ( s[i] != LOBYTE(flag[i]) ) { puts(\u0026#34;wrong!\u0026#34;); return -1; } } puts(\u0026#34;correct!\u0026#34;); return 0; } FLAG: DUCTF{stringent_strings_string}\r2. Flag loader ƒê·∫ßu ti√™n, nh√¨n v√†o h√†m main, ta th·∫•y ƒë∆∞·ª£c r·∫±ng s·∫Ω ph·∫£i tr·∫£i qua 3 c√¢u h·ªèi t∆∞∆°ng ƒë∆∞∆°ng v·ªõi 3 h√†m check1, check2, check3. K·∫øt qu·∫£ c·ªßa c√°c h√†m check ƒë∆∞·ª£c l∆∞u l·∫ßn l∆∞·ª£t t·∫°i c√°c bi·∫øn v4, v5, v6 (ki·ªÉu int). Khi ƒë√£ pass ƒë∆∞·ª£c qua 3 h√†m check th√¨ ch√∫ng ta s·∫Ω c√≥ ƒë∆∞·ª£c flag.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int __cdecl main(int argc, const char **argv, const char **envp) int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [rsp+Ch] [rbp-124h] int v5; // [rsp+10h] [rbp-120h] int v6; // [rsp+14h] [rbp-11Ch] FILE *stream; // [rsp+18h] [rbp-118h] char s[264]; // [rsp+20h] [rbp-110h] BYREF unsigned __int64 v9; // [rsp+128h] [rbp-8h] v9 = __readfsqword(0x28u); init(); v4 = check1(); v5 = check2(); v6 = check3(); puts(\u0026#34;You\u0026#39;ve passed all the checks! Please be patient as the flag loads.\u0026#34;); puts(\u0026#34;Loading flag... (this may or may not take a while)\u0026#34;); sleep(v6 * v5 * v4); stream = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); fgets(s, 255, stream); printf(\u0026#34;%s\u0026#34;, s); return 0; } Tuy nhi√™n, kh√¥ng d·ªÖ ƒÉn nh∆∞ v·∫≠y, khi ·ªü d√≤ng 17, c√≥ m·ªôt c√¢u l·ªánh sleep v·ªõi tham s·ªë truy·ªÅn v√†o l√† t√≠ch v6, v5 v√† v4. Nh∆∞ v·∫≠y, n·∫øu k·∫øt qu·∫£ t√≠ch n√†y l·ªõn, ch√∫ng ta c√≥ th·ªÉ ch·ªù ƒë·∫øn m√πa qu√Ωt flag c≈©ng ch∆∞a ƒë∆∞·ª£c g·ª≠i t·ªõi. Do v·∫≠y, ƒë·ªÉ kh√¥ng ph·∫£i ch·ªù, ch√∫ng ta s·ª≠ d·ª•ng integer overflow (k·ªπ thu·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ch√≠nh trong b√†i n√†y). Ch√∫ng ta s·∫Ω ƒëi·ªÅu ch·ªânh gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa c√°c h√†m check1, check2, check3 l√†m sao cho t√≠ch v6, v5, v4 s·∫Ω l√† 2^32 = 4294967296 t∆∞∆°ng ƒë∆∞∆°ng v·ªõi s·ªë 0.\nCh√∫ng ta xem qua c√°c h√†m check1:\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 __int64 check1() { char v1; // [rsp+Ah] [rbp-16h] unsigned __int8 v2; // [rsp+Bh] [rbp-15h] int i; // [rsp+Ch] [rbp-14h] char buf[6]; // [rsp+12h] [rbp-Eh] BYREF unsigned __int64 v5; // [rsp+18h] [rbp-8h] v5 = __readfsqword(0x28u); v1 = 0; v2 = 1; printf(\u0026#34;Give me five letters: \u0026#34;); read(0, buf, 5uLL); for ( i = 0; i \u0026lt;= 4; ++i ) { v1 += X[i] ^ buf[i]; v2 *= ((_BYTE)i + 1) * buf[i]; } if ( v1 || !v2 ) die(); return v2; } X = [0x44, 0x55, 0x43, 0x54, 0x46]\nH√†m check1 y√™u c·∫ßu nh·∫≠p 1 chu·ªói 5 k√Ω t·ª± sao cho sau v√≤ng l·∫∑p ·ªü d√≤ng 14 ƒë·∫øn 18 th√¨ v1 = 0, c√≤n v2 l√† c√°i qu·∫ßn g√¨ c≈©ng ƒë∆∞·ª£c mi·ªÖn l√† kh√°c 0. Nh∆∞ng theo t√¥i, ƒë·ªÉ d·ªÖ t√≠nh to√°n th√¨ n√™n l√† m·ªôt lu·ªπ th·ª´a c·ªßa 2.\nv1 = X[0]^buf[0] + X[1]^buf[1] + X[2]^buf[2] + X[3]^buf[3] + X[4]^buf[4]\nSau khi th·ª≠ XOR c√°c k√Ω t·ª± ch·ªØ th∆∞·ªùng, ch·ªØ in hoa, s·ªë trong b·∫£ng ASCII v·ªõi m·∫£ng X, th√¨ trong chu·ªói 5 k√Ω t·ª± n√†y ph·∫£i ch·ª©a 3 k√Ω t·ª± in hoa v√† 2 k√Ω t·ª± s·ªë th√¨ m·ªõi cho ra ƒë∆∞·ª£c v1 = 0. V√¨ gi√° tr·ªã XOR c·ªßa c√°c k√Ω t·ª± s·ªë v·ªõi m·∫°ng X l√† r·∫•t l·ªõn kho·∫£ng t·∫ßm 0x63 ƒë·∫øn 0x7f, n·∫øu c·ªông 2 k√Ω t·ª± b·∫•t k·ª≥ s·∫Ω cho ra ƒë∆∞·ª£c 1 s·ªë g·∫ßn v·ªõi 0xff nh·∫•t, sau ƒë√≥ c·ªông th√™m 3 k·∫øt qu·∫£ XOR v·ªõi 3 k√Ω t·ª± in hoa (c√°c k·∫øt qu·∫£ n√†y nh·ªè h∆°n 0x20) th√¨ l√† v·ª´a ƒë·ªß. Kh√¥ng th·ªÉ s·ª≠ d·ª•ng gi√° tr·ªã XOR v·ªõi m·∫£ng X c·ªßa c√°c k√Ω t·ª± th∆∞·ªùng v√¨ ch√∫ng qu√° nh·ªè.\nv2 = (120*buf[0]*buf[1]*buf[2]*buf[3]*buf[4])\u0026amp;0xff\nGi√° tr·ªã c·ªßa v2 r·∫•t quan tr·ªçng v√¨ n√≥ l√† ƒë·∫ßu ra c·ªßa h√†m check1. V√† t√°c gi·∫£i ƒë√∫ng l√† kh√¥ng d·ªÖ ch∆°i khi cho v2#0. ƒê·∫øn ƒë√¢y, t√¥i xin ƒë∆∞·ª£c s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p \u0026ldquo;m√≤\u0026rdquo;. C√≥ 2 k·∫øt qu·∫£ t√¥i t√¨m ƒë∆∞·ª£c tho·∫£ check1 l√† \u0026ldquo;4SSS5\u0026rdquo; v√† \u0026ldquo;4RSR5\u0026rdquo;. Tuy nhi√™n, ·ªü k·∫øt qu·∫£ \u0026ldquo;4RSR5\u0026rdquo;, t√¥i t√≠nh ƒë∆∞·ª£c gi√° tr·ªã v2 = 128 = 2^6. K·∫øt qu·∫£ n√†y ƒë·∫πp tuy·ªát v·ªùi v√† t√¥i quy·∫øt ƒë·ªãnh ch·ªçn n√≥.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 __int64 check2() { unsigned int v1; // [rsp+Ch] [rbp-14h] BYREF unsigned int v2; // [rsp+10h] [rbp-10h] BYREF unsigned int v3; // [rsp+14h] [rbp-Ch] unsigned __int64 v4; // [rsp+18h] [rbp-8h] v4 = __readfsqword(0x28u); LOWORD(v3) = rand(); v3 = (unsigned __int16)v3; printf(\u0026#34;Solve this: x + y = %d\\n\u0026#34;, (unsigned __int16)v3); __isoc99_scanf(\u0026#34;%u %u\u0026#34;, \u0026amp;v1, \u0026amp;v2); if ( !v1 || !v2 || v1 \u0026lt;= v3 || v2 \u0026lt;= v3 ) die(); if ( v2 + v1 != v3 || (unsigned __int16)(v1 * v2) \u0026lt;= 0x3Bu ) die(); return (unsigned __int16)(v1 * v2); } ƒê·ªëi v·ªõi h√†m check2, ta c·∫ßn gi·∫£i quy·∫øt ph√©p to√°n v1 + v2 = a, v·ªõi s·ªë a ƒë∆∞·ª£c cho random sao cho v1 \u0026gt; a v√† v2 \u0026gt; a. Nh√¨n v√†o ta c≈©ng bi·∫øt ƒë∆∞·ª£c c·∫ßn ·ª©ng d·ª•ng integer overflow ƒë·ªÉ gi·∫£i quy·∫øt ph√©p to√°n n√†y. Tuy nhi√™n, c√°i ch√∫ng ta c·∫ßn quan t√¢m l√† ƒë·∫ßu ra c·ªßa h√†m check2 (v1*v2).\nTham v·ªçng c·ªßa t√¥i ƒë·ªëi v·ªõi h√†m check2 l√† ƒë·ªÉ n√≥ ra ƒë∆∞·ª£c k·∫øt qu·∫£ l√† 2^15. V√¨ ƒë·∫ßu ra n√†y c√≥ ki·ªÉu unsigned __int16, s·ªë d∆∞∆°ng l·ªõn nh·∫•t c·ªßa n√≥ ch√≠nh l√† 2^15. Do ƒë√≥, theo nh∆∞ 2 s·ªë t√¥i in ra b√™n d∆∞·ªõi t∆∞∆°ng ƒë∆∞∆°ng:\nv1 = a + 32768\nv2 = - 32768\nTh√¨ v1*v2 = (a + 2^15) (-2)^15 t∆∞∆°ng ƒë∆∞∆°ng shift right a + 2^15, 15 bit. Do a + 2^15 \u0026gt; 2^15 n√™n k·∫øt qu·∫£ ƒë·∫ßu ra s·∫Ω l√† 2^15.\n0 1 a = 32919 print(str(a + 32768) + \u0026#34; \u0026#34; + str(4294967296 - 32768)) Nh∆∞ v·∫≠y, ta ƒë√£ c√≥ check1(2) = 2^6, check2() = 2^15, suy ra check3() = 2^11 m·ªõi kh√¥ng ph·∫£i ƒë·ª£i ch·ªù trong v√¥ v·ªçng nh∆∞ t√¥i ƒë√£ t·ª´ng.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 __int64 check3() { unsigned int v1; // [rsp+0h] [rbp-20h] BYREF unsigned int v2; // [rsp+4h] [rbp-1Ch] BYREF unsigned int v3; // [rsp+8h] [rbp-18h] BYREF unsigned int v4; // [rsp+Ch] [rbp-14h] BYREF unsigned int v5; // [rsp+10h] [rbp-10h] BYREF int v6; // [rsp+14h] [rbp-Ch] unsigned __int64 v7; // [rsp+18h] [rbp-8h] v7 = __readfsqword(0x28u); LOWORD(v6) = rand(); v6 = (unsigned __int16)v6; printf(\u0026#34;Now solve this: x1 + x2 + x3 + x4 + x5 = %d\\n\u0026#34;, (unsigned __int16)v6); __isoc99_scanf(\u0026#34;%u %u %u %u %u\u0026#34;, \u0026amp;v1, \u0026amp;v2, \u0026amp;v3, \u0026amp;v4, \u0026amp;v5); if ( !v1 || !v2 || !v3 || !v4 || !v5 ) die(); if ( v1 \u0026gt;= v2 || v2 \u0026gt;= v3 || v3 \u0026gt;= v4 || v4 \u0026gt;= v5 ) die(); if ( v5 + v4 + v3 + v2 + v1 != v6 || (unsigned __int16)((v3 - v2) * (v5 - v4)) \u0026lt;= 0x3Bu ) die(); return (unsigned __int16)((v3 - v2) * (v5 - v4)); } Trong check3, c·∫ßn tho·∫£ v1 + v2 + v3 + v4 + v5 = a, v·ªõi a l√† random sao cho v1 \u0026lt; v2 \u0026lt; v3 \u0026lt; v4 \u0026lt; v5. K·∫øt qu·∫£ ƒë·∫ßu ra l√† (v3 - v2)*(v5 - v4) c≈©ng l√† ki·ªÉu unsigned __int16. Do 2^11 \u0026lt; 2^15 n√™n y√™n t√¢m l√† k·∫øt qu·∫£ s·∫Ω ra d∆∞∆°ng.\nTham v·ªçng c·ªßa t√¥i l√† l√†m cho v3 - v2 = 2^5, c√≤n v5 - v4 = 2^6. V√† t√¥i chia ƒë∆∞·ª£c nh∆∞ sau:\na = (a - 96) + (a + 33) + (a + 2^5 + 33) - (a + 33) - (a - 2^6 + 33)\nv1 = a - 96\nv2 = a + 33\nv3 = a + 2^5 + 33\nv4 = a + 33\nv5 = a - 2^6 + 33\n0 1 2 a = 37171 #a - 96 + (a + 33) + (a+2**5 + 33) - (a + 33) - (a - 2**6 + 33) print (str(a - 96) +\u0026#34; \u0026#34; + str(a + 33) +\u0026#34; \u0026#34; + str(a+2**5 + 33) + \u0026#34; \u0026#34;+ str(4294967296 - (a+33)) +\u0026#34; \u0026#34; + str(4294967296 - (a - 2**6 + 33)) ) Cu·ªëi c√πng, sau 13 ti·∫øng ƒë·ªìng h√≤ m√≤ t·ªõi m√≤ lui, th√¨ flag ƒë√£ hi·ªán ra m√† kh√¥ng ph·∫£i ch·ªù 1s n√†o.\nFLAG: DUCTF{y0u_sur3_kn0w_y0ur_int3gr4l_d4t4_typ3s!}\rH√¨nh 1:\rK·∫øt qu·∫£\rRead more and download file at Github\n","description":"Just 2 challenges RE üòï","id":6,"section":"posts","tags":["write-up","DUCTF","CTF","RE","rev"],"title":"DownUnderCTF 2021 REV Write-ups","uri":"https://thunebae.github.io/en/posts/downunderctf/"},{"content":"1. ES crack File: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, with debug_info, not stripped\nS·ª≠ d·ª•ng IDA pro 32-bit, t·∫≠p trung v√†o ƒëo·∫°n code sau:\nH√¨nh 1:\rM√£ assembly\rTa th·∫•y r·∫±ng ch·ªâ c·∫ßn th√™m v√†o chu·ªói c√≥ c√°c k√Ω t·ª± ƒë·∫ßu b·∫±ng v·ªõi password (0x35353450) th√¨ kh√∫c sau c√°c k√Ω t·ª± c√≥ l√† g√¨ c≈©ng kh√¥ng quan tr·ªçng.\nFLAG: P445x (v·ªõi x l√† chu·ªói k√Ω t·ª± t·ª± do)\nH√¨nh 2:\rK·∫øt qu·∫£\r2. Lucky File: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, with debug_info, not stripped\nFile y√™u c·∫ßu nh·∫≠p v√†o 2 ch·ªØ s·ªë v√† ch·ªØ n√†y l·∫ßn l∆∞·ª£t l∆∞u t·∫°i byte_804A024 v√† byte_804A025.\nH√¨nh 3:\rM√£ assembly\rTrong ƒëo·∫°n code assembly tr√™n, ta th·∫•y byte_804A024 ƒë∆∞·ª£c chuy·ªÉn t·ª´ k√Ω t·ª± th√†nh s·ªë th√¥ng qua tr·ª´ cho 0x30 v√† l∆∞u t·∫°i thanh ghi al. C√≤n byte_804A024 c≈©ng ƒë∆∞·ª£c chuy·ªÉn t·ª´ k√Ω t·ª± sang s·ªë v√† l∆∞u t·∫°i thanh ghi bl. Sau ƒë√≥, al = al + bl qua c√¢u l·ªánh adc v√† ƒë∆∞·ª£c so s√°nh v·ªõi 0x16. M√† bl + 0x30 = 0x38\nSuy ra: bl = 8 =\u0026gt; al = 8\nFLAG: 88\nH√¨nh 4:\rK·∫øt qu·∫£\r3. CrackMe_ASM File: CrackMe_ASM: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped\nY√™u c·∫ßu nh·∫≠p v√†o gi√° tr·ªã cho bi·∫øn var. C√°c byte c·ªßa bi·∫øn flag l·∫ßn l∆∞·ª£c ƒë∆∞·ª£c g√°n gi√° tr·ªã r·ªìi so s√°nh v·ªõi chu·ªói trong bi·∫øn var v·ª´a nh·∫≠p. N·∫øu b·∫±ng nhau th√¨ th√†nh c√¥ng m√† kh√¥ng b·∫±ng nhau th√¨ kh√¥ng th√†nh c√¥ng.\nH√¨nh 5:\rM√£ assembly 1\rH√¨nh 6:\rM√£ assembly 2\rFLAG: S3CrE+Fl4G!\nH√¨nh 7:\rK·∫øt qu·∫£\r4. hello File: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\nH√¨nh 8:\rM√£ assembly 1\rƒê·∫ßu ti√™n, ch√∫ng ta nh·∫≠p chu·ªói username, sau ƒë√≥ chu·ªói welcome b·∫±ng \u0026ldquo;Hello \u0026quot; + username. Password nh·∫≠p v√†o l∆∞u trong buf.\nH√¨nh 9:\rM√£ assembly 2\r·ªû ƒë√¢y, ch√∫ng ta th·∫•y welcome[v4 + 5] + 5 == byte_402073[v4]. Ch√∫ng ta xem th·ª≠ byte_402073 r·ªët cu·ªôc l√† c√°i qq g√¨.\nH√¨nh 10:\rM√£ assembly 3\rN·∫øu nh∆∞ byte_402073 ·ªü v·ªã tr√≠ 0x402073 th√¨ chu·ªói buf ƒëang l∆∞u password ·ªü v·ªã tr√≠ 0x402074. Suy ra v4 = 1 s·∫Ω l√† byte ƒë·∫ßu ti√™n c·ªßa chu·ªói buf. V√† password ·ªü ƒë√¢y c≈©ng ch·ªâ c√≥ 1 k√Ω t·ª± d·ª±a v√†o d√≤ng l·ªánh if (!\u0026ndash;v4).\nV·∫≠y welcome[6] + 5 = buf[0] =\u0026gt; k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa username + 5 b·∫±ng password. Nh·∫≠p username l√† thune =\u0026gt; password: y\nUSERNAME: thune FLAG: y\nH√¨nh 11:\rK·∫øt qu·∫£\r5. nasm File: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\nH√¨nh 12:\rM√£ assembly 1\rFlag ƒë∆∞·ª£c nh·∫≠p v√†o s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i ƒë·ªãa ch·ªâ 0x402031 sau ƒë√≥ ƒëem ƒëi so s√°nh 0xB k√Ω t·ª± ƒë·∫ßu v·ªõi chu·ªói passwd. Chu·ªói passwd bao g·ªìm c√°c k√Ω t·ª± sau:\nH√¨nh 13:\rM√£ assembly 2\rpasswd = supersecret\nFLAG: supersecretx, v·ªõi x l√† 1 chu·ªói ng·∫´u nhi√™n\nH√¨nh 14:\rK·∫øt qu·∫£\r6. Clone File: PE32 executable (GUI) Intel 80386, for MS Window\nH√¨nh 15:\rCh·∫°y th·ª≠\rƒê·∫ßu ti√™n, ch√∫ng ta ki·ªÉm tra th·ª≠ list strings c·ªßa b√†i n√†y:\nH√¨nh 16:\rLi·ªát k√™ string\rCh√∫ng ta ƒë·ªÉ √Ω c√≥ c√°c chu·ªói \u0026ldquo;Well done! Now make good tutorial :)\u0026rdquo;, \u0026ldquo;Bravo!\u0026rdquo; c√≥ th·ªÉ l√† c√°c chu·ªói th√¥ng b√°o ƒë√£ nh·∫≠p ƒë√∫ng User v√† Serial.\nTi·∫øp theo ch√∫ng ta xem th·ª≠ c√°c chu·ªói n√†y n·∫±m ·ªü h√†m n√†o v√† h√†m ƒë√≥ li√™n quan t·ªõi nh·ªØng h√†m n√†o.\nH√¨nh 17:\rFlow graph\rH√†m start l√† h√†m kh·ªüi ƒë·∫ßu g·ªçi h√†m sub_40101D ƒë·ªÉ load c√°c control (textbox, label, button) cho window form. C√°c control c√≥ s·ªë hi·ªáu nh·∫≠n d·∫°ng l√† 101, 102, 104 ƒë∆∞·ª£c l∆∞u ·ªü c√°c bi·∫øn v4, v2, v1. Sau ƒë√≥, h√†m sub_40101D g·ªçi h√†m sub_401180 ƒë·ªÉ l√†m h√†nh ƒë·ªông cho c√°c control n√†y.\nH√¨nh 18:\rH√†m sub_40101D\rƒê·ªÉ pass, ch√∫ng ta c·∫ßn xem x√©t k·ªπ h√†m sub_401180.\nH√¨nh 19:\rH√†m sub_401180 (1)\rC√¢u l·ªánh n√†y ch·ª©a h√†m GetDlgItemTextA() l√† h√†m cho ƒë·∫ßu ra l√† s·ªë l∆∞·ª£ng k√Ω t·ª± c·ªßa string nh·∫≠p v√†o, t·ª´ ƒë√≥ ch√∫ng ta suy ra trong 2 control mang s·ªë nh·∫≠n d·∫°ng 101 ho·∫∑c 102, 1 c√°i l√† User nh·∫≠p v√†o, 1 c√°i l√† Serial nh·∫≠p v√†o. N·∫øu l√† control 101 th√¨ string ƒë∆∞·ª£c l∆∞u ·ªü byte_40307C c√≥ s·ªë k√Ω t·ª± ph·∫£i l·ªõn h∆°n 5, c√≤n 102 th√¨ l∆∞u ·ªü String c√≥ s·ªë k√Ω t·ª± b·∫±ng 8.\nƒê·ªÉ x√°c ƒë·ªãnh ƒë√¢u l√† User, ƒë√¢u l√† Serial, ta ƒë·∫∑t break point trong h√†m sub_401180 t·∫°i c√¢u l·ªánh:\nH√¨nh 20:\rV·ªã tr√≠ ƒë·∫∑t breakpoint\rSau ƒë√≥ debug, nh·∫≠p \u0026ldquo;11111\u0026rdquo; v√†o User, \u0026ldquo;22222\u0026rdquo; v√†o Serial v√† xem k·∫øt qu·∫£ t·∫°i bi·∫øn byte_40307C v√† String, ta ƒë∆∞·ª£c k·∫øt qu·∫£ nh∆∞ sau:\nH√¨nh 21:\rDebug\rNh∆∞ v·∫≠y, Serial ƒë∆∞·ª£c l∆∞u trong String, User ƒë∆∞·ª£c l∆∞u trong bi·∫øn byte_40307C\nƒêo·∫°n code t·ª´ d√≤ng 29-57 kh√¥ng l√†m thay ƒë·ªïi gi√° tr·ªã byte_40307C v√† c≈©ng kh√¥ng so s√°nh ƒëi·ªÅu ki·ªán ƒë·ªÉ tho·∫£ ch∆∞∆°ng tr√¨nh n√™n ch√∫ng ta kh√¥ng c·∫ßn quan t√¢m ƒë·∫øn n√≥. Ch√∫ng ta ki·ªÉm tra ƒëo·∫°n code ch·ª©a d√≤ng l·ªánh hi·ªán messageBox th√¥ng b√°o bypass ch∆∞∆°ng tr√¨nh nh∆∞ sau.\nH√¨nh 22:\rH√†m sub_401180 (2)\rNh∆∞ v·∫≠y, c√≥ 2 v·∫•n ƒë·ªÅ ch√∫ng ta quan t√¢m ·ªü ƒë√¢y l√† gi√° tr·ªã c·ªßa bi·∫øn dword_4030C8 v√† gi√° tr·ªã bi·ªÉu th·ª©c b√™n tr√°i d·∫•u b·∫±ng c√≥ li√™n quan h√†ng lo·∫°t ƒë·∫øn m·∫£ng byte_4030B8. Hai gi√° tr·ªã n√†y ph·∫£i b·∫±ng. ƒê·∫ßu ti√™n, gi√° tr·ªã c·ªßa bi·∫øn dword_4030C8 c√≥ li√™n quan ƒë·∫øn byte_40307C (User) qua m·ªôt n√πi code sau:\nH√¨nh 23:\rM√£ gi·∫£\rdword_4030C8 ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n User v√† ·ªü ƒë√¢y kh√¥ng c√≥ ki·ªÉm tra b·∫•t k·ª≥ ƒëi·ªÅu ki·ªán th√™m n√†o gi√†nh cho User. Do ƒë√≥, v·ªõi m·ªôt User b·∫•t k·ª≥ nh·∫≠p v√†o, ta lu√¥n t√≠nh ƒë∆∞·ª£c gi√° tr·ªã c·ªßa bi·∫øn n√†y t∆∞∆°ng ·ª©ng.\nC√≤n m·∫£ng byte_4030B8 li√™n quan ƒë·∫øn ƒëo·∫°n code sau:\nH√¨nh 24:\rM√£ gi·∫£\rƒêo·∫°n code n√†y c√≥ ch·ª©c nƒÉng chuy·ªÉn c√°c k√Ω t·ª± trong chu·ªói String th√†nh c√°c s·ªë. N·∫øu l√† k√Ω t·ª± s·ªë nh∆∞ \u0026ldquo;1\u0026rdquo; th√¨ ƒë∆∞·ª£c tr·ª´ cho 48 chuy·ªÉn th√†nh s·ªë 0x1. N·∫øu l√† k√≠ t·ª± in hoa t·ª´ v·ªã tr√≠ 0x41 ƒë·∫øn 0x46 trong b·∫£ng m√£ ASCII, v√≠ d·ª• nh∆∞ \u0026ldquo;A\u0026rdquo; th√¨ ƒë∆∞·ª£c tr·ª´ cho 55 (65-55 = 10 = 0xa). C√°c tr∆∞·ªùng h·ª£p c√≤n l·∫°i kh√¥ng ph·∫£i k√Ω t·ª± thu·ªôc m√£ hex th√¨ kh√¥ng h·ª£p l·ªá. T√≥m l·∫°i, n·∫øu nh·∫≠p chu·ªói \u0026ldquo;aabbcc\u0026rdquo; th√¨ m·∫£ng byte_4030B8 s·∫Ω g·ªìm {0xa, 0xa, 0xb, 0xb, 0xc, 0xc}. T·ª´ ƒë√≥, ta bi·∫øt ƒë∆∞·ª£c chu·ªói nh·∫≠p v√†o String ph·∫£i g·ªìm 8 k√Ω t·ª±, c√°c k√Ω t·ª± in hoa v√† l√† m·ªôt m√£ hex.\nƒêi·ªÅu ki·ªán ph·∫£i ƒë∆∞·ª£c tho·∫£ trong c√¢u l·ªánh if nh∆∞ sau:\ndword_4030C8 = _ byteswap_ulong((((byte_4030B8[7] + 16 * byte_4030B8[6]) ^ 0xCD) - 17) + (((((byte_4030B8[5] + 16 * byte_4030B8[4]) ^ 0x90) - 85)\n+ (((((byte_4030B8[3] + 16 * byte_4030B8[2]) ^ 0x56) + 120)\n+ ((((byte_4030B8[1] + 16 * byte_4030B8[0]) ^ 0x12) + 52) \u0026laquo; 8)) \u0026laquo; 8)) \u0026laquo; 8)))\nDo m·ªói ph·∫ßn t·ª≠ c·ªßa m·∫£ng byte_4030B8 c√≥ 4 bits n√™n khi l·∫•y byte_4030B8[i] * 16 + byte_4030B8[i+1] s·∫Ω th√†nh m·ªôt byte. _ byteswap_ulong l√† h√†m c√≥ ƒë·∫ßu ra l√† m·ªôt s·ªë vi·∫øt theo little-endian. T√≥m l·∫°i l√† nh∆∞ sau:\ns[0] ^ 0x12 + 52 = dword_4030C8[3]\ns[1] ^ 0x56 + 120 = dword_4030C8[2]\ns[2] ^ 0x90 - 85 = dword_4030C8[1]\ns[3] ^ 0xCD - 17 = dword_4030C8[0]\nV·ªõi s[i] l√† byte do 4 bit c·ªßa ph·∫ßn t·ª≠ byte_4030B8[i] v√† ph·∫ßn t·ª≠ byte_4030B8[i+1] t·∫°o th√†nh.\nƒê·ªÉ t√¨m ƒë∆∞·ª£c dword_4030C8, ta ki·ªÉm tra xem bi·∫øn n√†y ƒë∆∞·ª£c t√≠nh gi√° tr·ªã ƒë·∫∑t trong thanh ghi n√†o r·ªìi ƒë·∫∑t breakpoint t·∫°i th·ªùi ƒëi·ªÉm gi√° tr·ªã ƒë∆∞·ª£c t√≠nh ra ƒë·ªÉ nh√¨n th·∫•y k·∫øt qu·∫£. L∆∞u √Ω ph·∫£i nh·∫≠p Serial v·ªõi chu·ªói b·∫•t k·ª≥ 8 k√Ω t·ª± ƒë·ªÉ c√≥ th·ªÉ bypass ƒëi·ªÅu ki·ªán, User ch·ªçn ng·∫´u nhi√™n ·ªü ƒë√¢y l√† \u0026ldquo;thune1\u0026rdquo;.\nH√¨nh 25:\rM√£ assembly\rTa th·∫•y r·∫±ng gi√° tr·ªã c·ªßa dword_4030C8 ƒë∆∞·ª£c l∆∞u ·ªü thanh ghi ebx n√™n ta debug v√† ki·ªÉm tra gi√° tr·ªã ebx.\nH√¨nh 26:\rThanh ghi ebx\rs[0] ^ 0x12 + 0x34 = 0x0f\ns[1] ^ 0x56 + 0x78 = 0xc6\ns[2] ^ 0x90 + 0xab = 0x5c\ns[3] ^ 0xcd + 0xef = 0x8b\nD·ª±a v√†o m√£ assembly c·ªßa c√°c ph√©p t√≠nh n√†y ƒë·ªÉ suy ng∆∞·ª£c l·∫°i ra s[i].\nH√¨nh 27:\rM√£ assembly\r1 byte s[0] s·∫Ω ƒë∆∞·ª£c l∆∞u trong ebx, sau ƒë√≥ ta ch·ªâ l·∫•y thanh ghi bl (8 bits c·ªßa thanh ghi ebx) xor v·ªõi 0x12, r·ªìi c·ªông v·ªõi 0x34. L√∫c n√†y gi√° tr·ªã c√≥ th·ªÉ qu√° l·ªõn v√† v∆∞·ª£t qua 8 bit n√™n and v·ªõi 0xff ƒë·ªÉ l·∫•y ch·ªâ 8 bit. Ta suy ng∆∞·ª£c l·∫°i c√°ch t√≠nh s[0] nh∆∞ sau: (0x0f - 0x34)^0x12. Nh∆∞ng v√¨ c√°c ph√©p t√≠nh + ho·∫∑c tr·ª´ c√≥ th·ªÉ sinh ra s·ªë √¢m n√™n ta ph·∫£i c·ªông th√™m v·ªõi 256, ƒë·ªìng th·ªùi do ch·ªâ c·ªông thanh ghi bl v·ªõi 0x34, t·ª©c ch·ªâ l·∫•y 8 bit c·ªông v·ªõi 0x34, n√™n khi suy ng∆∞·ª£c l·∫°i ph·∫£i th√™m and 0xff ƒë·ªÉ l·∫•y ch·ªâ 8 bit.\nCu·ªëi c√πng,\ns[0] = ((0x0f - 0x34 + 256)\u0026amp;0xff)^0x12\ns[1] = ((0xc6 - 0x78 + 256)\u0026amp;0xff)^0x56\ns[2] = ((0x5c - 0xab + 256)\u0026amp;0xff)^0x90\ns[3] = ((0x8b - 0xef + 256)\u0026amp;0xff)^0xcd\nTa ƒë∆∞·ª£c Serial = C9182151 v·ªõi User = \u0026ldquo;thune1\u0026rdquo;\nH√¨nh 27:\rDone\r7. crack_001 File: PE32 executable (GUI) Intel 80386, for MS Windows\nKi·ªÉm tra c√°c chu·ªói c√≥ trong ch∆∞∆°ng tr√¨nh, th·∫•y c√≥ chu·ªói \u0026ldquo;Register complite!!!\u0026rdquo;, xem th·ª≠ c√°c h√†m li√™n quan ƒë·∫øn chu·ªói n√†y.\nH√¨nh 28:\rFlow graph\r·ªû h√†m DialogFunc t·∫°i d√≤ng 20, 21 c√≥ 2 c√¢u l·ªánh ƒë·ªÉ l·∫•y ƒë·ªô d√†i chu·ªói nh·∫≠p v√†o l∆∞u t·∫°i String v√† byte_403014. T∆∞∆°ng t·ª≠ c√¢u tr√™n, ƒë·∫∑t breakpoint v√† debug s·∫Ω bi·∫øt ƒë∆∞·ª£c String l√† PASS, byte_403014 l√† NAME. v6 l√† ƒë·ªô d√†i c·ªßa NAME v√† 3 \u0026lt;= v6, v6 = dword_403025.\nH√¨nh 29:\rDialog function\r·ªû h√†m sub_4010FE, m·ªói k√Ω t·ª± c·ªßa NAME, n·∫øu kh√¥ng ph·∫£i thu·ªôc {Z,z,9} s·∫Ω ƒë∆∞·ª£c c·ªông v·ªõi 1 v√† tr·ªü th√†nh byte cu·ªëi c·ªßa v1 (v1 c√≥ 2 bytes), c√≤n n·∫øu thu·ªôc {Z,z,9} th√¨ s·∫Ω tr·ª´ 1 r·ªìi c·ªông 1 tr·ª±c ti·∫øp tr·ªü th√†nh byte cu·ªëi c·ªßa v1. C√≤n byte ƒë·∫ßu c·ªßa v1 s·∫Ω ƒë∆∞·ª£c c·ªông v·ªõi 97 + v0.\nH√¨nh 30:\rM√£ gi·∫£\rX√©t ƒëi·ªÅu ki·ªán if ·ªü c√¢u l·ªánh 22, gi√° tr·ªã v1 ·ªü m·ªói v√≤ng l·∫∑p s·∫Ω ƒë∆∞·ª£c so s√°nh v·ªõi 2 bytes c·ªßa PASS[2* v0]. Do gi√° tr·ªã HIBYTE(v1) ·ªü m·ªói v√≤ng l·∫∑p lu√¥n b·∫±ng 0x00. Do ƒë√≥, ·ªü m·ªói v√≤ng gi√° tr·ªã c·ªßa HIBYTE(v1) ch√≠nh l√† gi√° tr·ªã c·ªßa v0 + 97 =\u0026gt; ƒë∆∞·ª£c c√°c byte cu·ªëi trong 2 byte c·ªßa PASS[2* v0] l√† 97, 98, 99,\u0026hellip; v·ªõi v0 thu·ªôc {0, 1, 2,\u0026hellip;}. C√≤n LOBYTE(v1) ph·∫£i b·∫±ng byte cu·ªëi c·ªßa PASS[v0* 2] tr·ª´ ƒëi 1, v·ªõi v0 thu·ªôc {0, 1, 2,\u0026hellip;}, n·∫øu k·∫øt qu·∫£ {Y,y,8} th√¨ ƒë∆∞·ª£c c·ªông th√™m 1.\nGi·∫£ s·ª≠ NAME = \u0026ldquo;gm0\u0026rdquo;. ·ªû v√≤ng l·∫∑p 1, v1 = 0x0067, HIBYTE(v1) = 0x00 + 0x97 = 0x97, LOBYTE(v1) = v1 + 1 = 0x67 + 1 = 0x68. T∆∞∆°ng t·ª±, ta s·∫Ω ƒë∆∞·ª£c PASS t∆∞∆°ng ·ª©ng.\nNAME = \u0026ldquo;gm0\u0026rdquo;, PASS = \u0026ldquo;hanb1c\u0026rdquo;\nH√¨nh 31:\rK·∫øt qu·∫£\r8.get_the_password File: PE32 executable (console) Intel 80386, for MS Windows\nChu·ªói password ƒë∆∞·ª£c l∆∞u t·∫°i unk_402010 v√† ƒë∆∞·ª£c g√°n cho bi·∫øn v2.\nH√¨nh 32:\rM√£ gi·∫£\rT·∫•t c·∫£ c√°c d√≤ng l·ªánh sau ƒë√≥ ƒë·ªÅu s·∫Ω ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠ n·∫øu tho·∫£ c√¢u l·ªánh if trong khi case = v0 (v0 gi·ªØ vai tr√≤ l√† ch·ªâ s·ªë c·ªßa ph·∫ßn t·ª≠ trong chu·ªói) th√¨ gi·∫£m v1 xu·ªëng 1 ƒë∆°n v·ªã, n·∫øu kh√¥ng tho·∫£ th√¨ tƒÉng l√™n. C√≥ t·ªïng c·ªông 10 l·∫ßn c·ªông 1 ƒë∆°n v·ªã n·∫øu c√°c ph·∫ßn t·ª≠ c·ªßa chu·ªói kh√¥ng tho·∫£ t·∫•t c·∫£ c√°c c√¢u l·ªánh if ƒë·∫∑t ra. M√† sau khi tƒÉng ho·∫∑c gi·∫£m v1 qua 10 l·∫ßn, n·∫øu gi√° tr·ªã v1 = 10 th√¨ nh·∫≠p password th√†nh c√¥ng. Do ƒë√≥, ·ªü t·∫•t c·∫£ c√°c l·∫ßn ki·ªÉm tra c√°c c√¢u l·ªánh if ki·ªÉm tra ph·∫ßn t·ª≠ c·ªßa chu·ªói nh·∫≠p v√†o ƒë·ªÅu ph·∫£i kh√¥ng tho·∫£.\nH√¨nh 33:\rM√£ gi·∫£\rpassword[1] \u0026gt; 0x47\rpassword[2] \u0026lt; 109\rpassword[3] = 86\rpassword[4] \u0026gt;= 0x66\rpassword[5] \u0026lt;= 0x33\rpassword[6] \u0026gt; 0x79\rpassword[7] \u0026gt;= 56\rpassword[8] \u0026lt; 78\rpassword[9] != 82\rpassword[10] = 50 Nh·∫≠p chu·ªói password = \u0026ldquo;PaVi0z9I32\u0026rdquo; c√≥ c√°c k√≠ t·ª± tho·∫£ c√°c ƒëi·ªÅu ki·ªán tr√™n.\nH√¨nh 34:\rK·∫øt qu·∫£\rTo be continute\u0026hellip;. Read more and download file at Github\n","description":"Waiting...It's not complete üìë ","id":7,"section":"posts","tags":["write-up","release1","CTF","RE","rev"],"title":"Release 1","uri":"https://thunebae.github.io/en/posts/release1/"},{"content":"ImaginaryCTF-Write-up 1. stings ƒê·∫ßu ti√™n, ta ph·∫£i ki·ªÉm tra ƒë·ªãnh d·∫°ng file.\nH√¨nh 1:\rFile stings\rNh∆∞ ta th·∫•y trong h√¨nh tr√™n, stings l√† file ELF 64-bit LSB pie excutetable, x86-64 =\u0026gt; s·ª≠ d·ª•ng IDApro 64-bit\nCh·∫°y th·ª≠ tr√™n m√°y ·∫£o xem c√≥ g√¨ trong tr·ªèng.\nH√¨nh 2:\rCh·∫°y demo\rFile n√†y ho√° ra l√† m·ªôt con ong th√≠ch ch∆°i tr√≤ m·∫≠t m√£. N·∫øu b·∫°n ƒëo√°n ƒë√∫ng m·∫≠t kh·∫©u th√¨ kh√¥ng b·ªã ch√≠ch. C√≤n ƒëo√°n sai th√¨ chetcondime b·∫°n r·ªìi.\nGi·ªù m·ªõi x√†i IDApro 64-bit ph√¢n t√≠ch file.\nNh√¨n qua m·ªôt n√πi h√†m th√¨ ch·ªâ c√≥ h√†m main l√† h√†m s·∫Ω gi√∫p ch√∫ng ta kh√¥ng b·ªã ong ch√≠ch. Xem m√£ gi·∫£ c·ªßa h√†m main.\nH√†m main khai b√°o nguy√™n m·ªôt n√πi bi·∫øn local. ƒê·ªÉ tr√°nh quan t√¢m nh·ªØng th√†nh ph·∫ßn kh√¥ng c·∫ßn thi·∫øt, ta t√¨m ch·ªó n√†o c√≥ li√™n quan ƒë·∫øn password tr∆∞·ªõc. ƒê√≥ l√† d√≤ng 64 ƒë·∫øn 79 trong m√£ gi·∫£.\nH√¨nh 3:\rIDAPro64\rv13 ch√≠nh l√† chu·ªói m√† ch√∫ng ta nh·∫≠p v√†o ·ªü d√≤ng 64. D·ª±a v√†o v√≤ng l·∫∑p for t·ª´ d√≤ng 65, ta ƒëo√°n ƒë∆∞·ª£c r·∫±ng password c√≥ 35 k√Ω t·ª±. D√≤ng 67-71 cho ta bi·∫øt r·∫±ng password c√≥ c√°c k√Ω t·ª± li√™n ti·∫øp c√≥ m√£ ascii b·∫±ng c√°c byte li√™n ti·∫øp t∆∞∆°ng ·ª©ng tr·ª´ ƒëi 1 t√≠nh t·ª´ byte ƒë·∫ßu ti√™n c·ªßa v14 (d√≤ng 67) tr√™n stack c·ªßa h√†m main (N·∫øu kh√¥ng tho·∫£ s·∫Ω in ra d√≤ng ch·ªØ \u0026ldquo;I\u0026rsquo;m disappointed. stings you\u0026rdquo; v√† b·ªã ong c·∫Øn). V·∫≠y n√™n, ch√∫ng ta c·∫ßn quan s√°t c√°c khai b√°o bi·∫øn local c·ªßa h√†m main ƒë·ªÉ xem th·ª© t·ª± c√°c bi·∫øn trong stack nh∆∞ n√†o.\nH√¨nh 4:\rBi·∫øn c·ª•c b·ªô\rNh∆∞ v·∫≠y, t√≠nh t·ª´ ƒë·ªânh stack theo chi·ªÅu t·ª´ d∆∞·ªõi l√™n tr√™n, k·ªÉ t·ª´ v14, ta c√≥ th·ª©c t·ª± c√°c bi·∫øn nh∆∞ sau v14-\u0026gt;v15-\u0026gt;v16-\u0026gt;v17-\u0026gt;v18. May thay m·∫•y bi·∫øn n√†y ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c g√°n gi√° tr·ªã l·∫°i c√≤n ƒë·ªß 35 bytes v√† m·∫•y n√πi code r·ªëi r·∫Øm c√≤n l·∫°i kh√¥ng g√¢y ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c gi√° tr·ªã n√†y v√† khi t·ªõi d√≤ng 67-71 ch·ªâ c·∫ßn l·∫•y ch√∫ng ra v√† qu·∫•t.\nH√¨nh 5:\rCode assembly\rCh√∫ √Ω: little-endian, l∆∞u m·∫£ng bytes t·ª´ d∆∞·ªõi l√™n tr√™n stack.\nv14 = 0x7375747C6775646A\nv15 = 0x3473356074686F32\nv16 = 0x346565326960756F\nv17 = 0x623233633832606F\nv18 = 0x7E3A37\n0 1 2 3 4 5 6 7 8 9 10 11 12 def hexToAscii(hexx): ascii = \u0026#34;\u0026#34; for i in range(0, len(hexx), 2): part = hexx[i: i+2] ascii += chr(int(part, 16) - 1) return ascii[::-1] v14 = \u0026#34;7375747C6775646A\u0026#34; v15 = \u0026#34;3473356074686F32\u0026#34; v16 = \u0026#34;346565326960756F\u0026#34; v17 = \u0026#34;623233633832606F\u0026#34; v18 = \u0026#34;7E3A37\u0026#34; print(hexToAscii(v14) + hexToAscii(v15) + hexToAscii(v16) + hexToAscii(v17) + hexToAscii(v18)) H√¨nh 6:\rK·∫øt qu·∫£\rFLAG: ictf{str1ngs_4r3nt_h1dd3n_17b21a69}\rUIUCTF 1. hvhpgs{synt} Sau khi s·ª≠ d·ª•ng IDApro, ta th·∫•y chu·ªói s nh·∫≠p v√†o ƒë∆∞·ª£c l∆∞u v√†o v3 (d√≤ng 22). Sau ƒë√≥ qua m·ªôt n√πi code hong l√†m thay ƒë·ªïi v3 th√¨ t·ªõi d√≤ng 30 - 36, c√°c k√Ω t·ª± c·ªßa chu·ªói nh·∫≠p v√†o ƒë∆∞·ª£c chuy·ªÉn qua 2 h√†m l·∫ßn l∆∞·ª£t l√† rot v√† shift, n·∫øu chu·ªói thay ƒë·ªïi b·∫±ng \u0026ldquo;azeupqd_ftq_cgqefuaz_omz_ymotuzqe_ftuzwu_bdabaeq_fa_o\u0026rdquo; th√¨ ta s·∫Ω ƒë∆∞·ª£c flag.\nH√¨nh 6:\rM√£ gi·∫£\rV√¨ v·∫≠y, ch√∫ng ta l·∫•y c√°i chu·ªói d√†i d√†i kia xong shift, rot. H√†m shift, rot c≈©ng ph·∫£i ƒë∆∞·ª£c vi·∫øt ng∆∞·ª£c l·∫°i.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def generate(): list_2495 = [2] i = 1 v3 = 3 while i \u0026lt;= 1337: a = 1 for j in range (i): if not (v3 % list_2495[j]): a = 0 if a: list_2495.append(v3) i = i + 1 v3 = v3 + 2 return list_2495 def rot(a1, a2): for i in range(len(a1)): v3 = a1[i] if v3 != 95: v3 = (v3 - 97 + a2) % 26 + 97 a1[i] = v3 def shift(a3, a4): for i in range(len(a3)): v11 = (i + a4) % len(a3) a3[i] = a3[v11] res = generate() v18 = \u0026#34;azeupqd_ftq_cgqefuaz_omz_ymotuzqe_ftuzwu_bdabaeq_fa_o\u0026#34; for i in range(1337): a = \u0026#34;\u0026#34; for j in range(len(v18)): v11 = ((j - res[1336 - i]) % len(v18) + len(v18)) % len(v18) a += v18[v11] v18 = a a = \u0026#34;\u0026#34; for j in range(len(v18)): if ord(v18[j]) != 95: v3 = (((ord(v18[j]) - 97 - res[1336 - i]) % 26) + 26) % 26 + 97 a += chr(v3) else: a += v18[j] v18 = a print(v18) FLAG: uiuctf{ i_propose_to_consider_the_question_can_machines_think}\r2. Tedious Trong m√£ gi·∫£ ta th·∫•y c√°c k√Ω t·ª± c·ªßa chu·ªói nh·∫≠p v√†o tr·∫£i qua m·ªôt m√πi v√≤ng for ƒë·ªÉ thay ƒë·ªïi t·ª´ng k√Ω t·ª±. N·∫øu sau tr·∫ßm lu√¢n nh∆∞ v·∫≠y m√† c√°c k√Ω t·ª± n√†y v·∫´n b·∫±ng 1 byte (l∆∞u √Ω l√† 1 byte) c·ªßa m·ªói ph·∫ßn t·ª≠ c·ªßa m·∫£ng v26 (m·ªói ph·∫ßn t·ª≠ 4 bytes) ƒë∆∞·ª£c li·ªát k√™ ra th√¨ ta ƒë∆∞·ª£c flag.\nC≈©ng gi·ªëng b√†i tr∆∞·ªõc, ta l√†m ng∆∞·ª£c l·∫°i qu√° tr√¨nh b·∫±ng c√°ch l·∫•y c√°c ph·∫ßn t·ª≠ trong m·∫£ng v26 r·ªìi cho qua c√°c v√≤ng for theo th·ª© t·ª± ng∆∞·ª£c l·∫°i. Khi ƒë√£ c√≥ c√°c ph·∫ßn t·ª≠ cu·ªëi c√πng, xor m·ªói ph·∫ßn t·ª≠ v·ªõi 0xFF ƒë·ªÉ l·∫•y 1 bytes.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 s = [77, 185, 77, 11, 212, 102, 227, 41, 184, 77, 223, 102, 184, 77, 14, 196, 223, 212, 20, 59, 223, 102, 44, 20, 71, 223, 183, 184, 183, 223, 71, 77, 164, 223, 50, 184, 234, 245, 146] flag = \u0026#34;\u0026#34; for i in range(39): s[i] = (s[i] ^ 0x6B) - 117 s[i] = (s[i] ^ 0xF0) + 43 s[i] = (s[i] ^ 0x1B) - 99 s[i] = (s[i] ^ 0xAB) - 10 s[i] = (s[i] ^ 0x64) + 115 s[i] = (s[i] ^ 0x6B) + 75 s[i] = (s[i] ^ 0x6B) - 22 s[i] = (s[i] ^ 0xFA) - 118 s[i] = (s[i] ^ 0x6B) + 38 s[i] = (s[i] ^ 0x6B) + 66 s[i] = (s[i] ^ 0x22) - 69 s[i] = (s[i] ^ 0xED) + 31 s[i] = (s[i] ^ 0xBD) - 11 s[i] = (s[i] ^ 0x5A) + 72 s[i] = (s[i] ^ 0xCD) - 10 s[i] = (s[i] ^ 0xA0) + 68 s[i] = (s[i] ^ 0x79) - 12 s[i] = (s[i] ^ 0x68) - 19 s[i] = (s[i] ^ 0x50) - 4 s[i] = (s[i] ^ 0xFD) - 18 s[i] = (s[i] ^ 0x38) - 59 s[i] = s[i] \u0026amp; 0xFF flag += chr(s[i]) print(flag) FLAG: uiuctf{y0u_f0unD_t43_fl4g_w0w_gud_j0b}\r3. Prime Extravaganza B√†i n√†y th√¨ ƒë∆°n gi·∫£n m√† sao kh√¥ng hi·ªÉu c√°i ƒë·ªÅ l·ª´a ng∆∞·ªùi qu√°.\nH√¨nh 7:\rIDAPro\rCode b·∫£o ph·∫£i nh·∫≠p 5 s·ªë l·ªõn h∆°n 0 v√† nh·ªè h∆°n 1 000 000. N·∫øu nh∆∞ c√°c s·ªë n√†y chia h·∫øt cho v9 = 19753*(j + 1) (0\u0026lt;=j\u0026lt;4). ·ªû ƒë√¢y, 19753 l√† 1 s·ªë nguy√™n t·ªë l·ªõn. Do ƒë√≥, ta l·∫•y lu√¥n c√°c gi√° tr·ªã v9 ·ªü m·ªói v√≤ng for l·∫ßn l∆∞·ª£t l√† c√°c s·ªë c·∫ßn nh·∫≠p v√†o l√† ƒë√£ pass.\nTi·∫øp theo, ƒë·ªÅ y√™u c·∫©u l·∫•y t·ªïng c√°c s·ªë v·ª´a nh·∫≠p xong md5 n√≥ =\u0026gt; flag\n0 1 2 3 4 5 import hashlib s = 0 for i in range(0,5,1): s += 19753*(i+1) print(hashlib.md5(str(s).encode()).hexdigest()) FLAG uiuctf{627360eb8aa0da45ff04a514dab40e54}\rRead more and download file at Github\n","description":"Some write-ups of CTF contests that I solved before","id":8,"section":"posts","tags":["write-up","CTF","RE","rev"],"title":"Write-ups REV CTF","uri":"https://thunebae.github.io/en/posts/write-up/"},{"content":"Hola üëã ‚ú®Welcome to my page and I am thunebae‚ú® üëß Well! This is a page of a little girl who try to study something in security, not easy, but it\u0026rsquo;s all her efforts everyday to gain knowledge üòï\nüìß Thank you to visit my page üòä\nüî≠ I‚Äôm currently studying on UIT (a university in Viet Nam) üå± I‚Äôm currently learning Security Information ü§î I‚Äôm looking for help with somebody who can love me üòù ‚ö° Fun fact: I don\u0026rsquo;t play game but I can spent 3 hours to watch streamers play it üòÉ ü§î I am currently focusing on: CTF: Write up some challenge rev (just rev üòÖ) And something else bla bla bla ¬©2021 by thunebae ","description":"My profile","id":9,"section":"","tags":null,"title":"About","uri":"https://thunebae.github.io/en/about/"}]