[{"content":"ImaginaryCTF-Write-up 1. stings Đầu tiên, ta phải kiểm tra định dạng file.\nHình 1:\rFile stings\r\r Như ta thấy trong hình trên, stings là file ELF 64-bit LSB pie excutetable, x86-64 =\u0026gt; sử dụng IDApro 64-bit\nChạy thử trên máy ảo xem có gì trong trỏng.\nHình 2:\rChạy demo\r\r File này hoá ra là một con ong thích chơi trò mật mã. Nếu bạn đoán đúng mật khẩu thì không bị chích. Còn đoán sai thì chetcondime bạn rồi.\nGiờ mới xài IDApro 64-bit phân tích file.\nNhìn qua một nùi hàm thì chỉ có hàm main là hàm sẽ giúp chúng ta không bị ong chích. Xem mã giả của hàm main.\nHàm main khai báo nguyên một nùi biến local. Để tránh quan tâm những thành phần không cần thiết, ta tìm chỗ nào có liên quan đến password trước. Đó là dòng 64 đến 79 trong mã giả.\nHình 3:\rIDAPro64\r\r v13 chính là chuỗi mà chúng ta nhập vào ở dòng 64. Dựa vào vòng lặp for từ dòng 65, ta đoán được rằng password có 35 ký tự. Dòng 67-71 cho ta biết rằng password có các ký tự liên tiếp có mã ascii bằng các byte liên tiếp tương ứng trừ đi 1 tính từ byte đầu tiên của v14 (dòng 67) trên stack của hàm main (Nếu không thoả sẽ in ra dòng chữ \u0026ldquo;I\u0026rsquo;m disappointed. stings you\u0026rdquo; và bị ong cắn). Vậy nên, chúng ta cần quan sát các khai báo biến local của hàm main để xem thứ tự các biến trong stack như nào.\nHình 4:\rBiến cục bộ\r\r Như vậy, tính từ đỉnh stack theo chiều từ dưới lên trên, kể từ v14, ta có thức tự các biến như sau v14-\u0026gt;v15-\u0026gt;v16-\u0026gt;v17-\u0026gt;v18. May thay mấy biến này đều đã được gán giá trị lại còn đủ 35 bytes và mấy nùi code rối rắm còn lại không gây ảnh hưởng đến các giá trị này và khi tới dòng 67-71 chỉ cần lấy chúng ra và quất.\nHình 5:\rCode assembly\r\r Chú ý: little-endian, lưu mảng bytes từ dưới lên trên stack.\nv14 = 0x7375747C6775646A\nv15 = 0x3473356074686F32\nv16 = 0x346565326960756F\nv17 = 0x623233633832606F\nv18 = 0x7E3A37\n0 1 2 3 4 5 6 7 8 9 10 11 12  def hexToAscii(hexx): ascii = \u0026#34;\u0026#34; for i in range(0, len(hexx), 2): part = hexx[i: i+2] ascii += chr(int(part, 16) - 1) return ascii[::-1] v14 = \u0026#34;7375747C6775646A\u0026#34; v15 = \u0026#34;3473356074686F32\u0026#34; v16 = \u0026#34;346565326960756F\u0026#34; v17 = \u0026#34;623233633832606F\u0026#34; v18 = \u0026#34;7E3A37\u0026#34; print(hexToAscii(v14) + hexToAscii(v15) + hexToAscii(v16) + hexToAscii(v17) + hexToAscii(v18))   Hình 6:\rKết quả\r\r FLAG: ictf{str1ngs_4r3nt_h1dd3n_17b21a69}\rUIUCTF 1. hvhpgs{synt} Sau khi sử dụng IDApro, ta thấy chuỗi s nhập vào được lưu vào v3 (dòng 22). Sau đó qua một nùi code hong làm thay đổi v3 thì tới dòng 30 - 36, các ký tự của chuỗi nhập vào được chuyển qua 2 hàm lần lượt là rot và shift, nếu chuỗi thay đổi bằng \u0026ldquo;azeupqd_ftq_cgqefuaz_omz_ymotuzqe_ftuzwu_bdabaeq_fa_o\u0026rdquo; thì ta sẽ được flag.\nHình 6:\rMã giả\r\r Vì vậy, chúng ta lấy cái chuỗi dài dài kia xong shift, rot. Hàm shift, rot cũng phải được viết ngược lại.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  def generate(): list_2495 = [2] i = 1 v3 = 3 while i \u0026lt;= 1337: a = 1 for j in range (i): if not (v3 % list_2495[j]): a = 0 if a: list_2495.append(v3) i = i + 1 v3 = v3 + 2 return list_2495 def rot(a1, a2): for i in range(len(a1)): v3 = a1[i] if v3 != 95: v3 = (v3 - 97 + a2) % 26 + 97 a1[i] = v3 def shift(a3, a4): for i in range(len(a3)): v11 = (i + a4) % len(a3) a3[i] = a3[v11] res = generate() v18 = \u0026#34;azeupqd_ftq_cgqefuaz_omz_ymotuzqe_ftuzwu_bdabaeq_fa_o\u0026#34; for i in range(1337): a = \u0026#34;\u0026#34; for j in range(len(v18)): v11 = ((j - res[1336 - i]) % len(v18) + len(v18)) % len(v18) a += v18[v11] v18 = a a = \u0026#34;\u0026#34; for j in range(len(v18)): if ord(v18[j]) != 95: v3 = (((ord(v18[j]) - 97 - res[1336 - i]) % 26) + 26) % 26 + 97 a += chr(v3) else: a += v18[j] v18 = a print(v18)   FLAG: uiuctf{ i_propose_to_consider_the_question_can_machines_think}\r2. Tedious Trong mã giả ta thấy các ký tự của chuỗi nhập vào trải qua một mùi vòng for để thay đổi từng ký tự. Nếu sau trầm luân như vậy mà các ký tự này vẫn bằng 1 byte (lưu ý là 1 byte) của mỗi phần tử của mảng v26 (mỗi phần tử 4 bytes) được liệt kê ra thì ta được flag.\nCũng giống bài trước, ta làm ngược lại quá trình bằng cách lấy các phần tử trong mảng v26 rồi cho qua các vòng for theo thứ tự ngược lại. Khi đã có các phần tử cuối cùng, xor mỗi phần tử với 0xFF để lấy 1 bytes.\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  s = [77, 185, 77, 11, 212, 102, 227, 41, 184, 77, 223, 102, 184, 77, 14, 196, 223, 212, 20, 59, 223, 102, 44, 20, 71, 223, 183, 184, 183, 223, 71, 77, 164, 223, 50, 184, 234, 245, 146] flag = \u0026#34;\u0026#34; for i in range(39): s[i] = (s[i] ^ 0x6B) - 117 s[i] = (s[i] ^ 0xF0) + 43 s[i] = (s[i] ^ 0x1B) - 99 s[i] = (s[i] ^ 0xAB) - 10 s[i] = (s[i] ^ 0x64) + 115 s[i] = (s[i] ^ 0x6B) + 75 s[i] = (s[i] ^ 0x6B) - 22 s[i] = (s[i] ^ 0xFA) - 118 s[i] = (s[i] ^ 0x6B) + 38 s[i] = (s[i] ^ 0x6B) + 66 s[i] = (s[i] ^ 0x22) - 69 s[i] = (s[i] ^ 0xED) + 31 s[i] = (s[i] ^ 0xBD) - 11 s[i] = (s[i] ^ 0x5A) + 72 s[i] = (s[i] ^ 0xCD) - 10 s[i] = (s[i] ^ 0xA0) + 68 s[i] = (s[i] ^ 0x79) - 12 s[i] = (s[i] ^ 0x68) - 19 s[i] = (s[i] ^ 0x50) - 4 s[i] = (s[i] ^ 0xFD) - 18 s[i] = (s[i] ^ 0x38) - 59 s[i] = s[i] \u0026amp; 0xFF flag += chr(s[i]) print(flag)   FLAG: uiuctf{y0u_f0unD_t43_fl4g_w0w_gud_j0b}\r3. Prime Extravaganza Bài này thì đơn giản mà sao không hiểu cái đề lừa người quá.\nHình 7:\rIDAPro\r\r Code bảo phải nhập 5 số lớn hơn 0 và nhỏ hơn 1 000 000. Nếu như các số này chia hết cho v9 = 19753*(j + 1) (0\u0026lt;=j\u0026lt;4). Ở đây, 19753 là 1 số nguyên tố lớn. Do đó, ta lấy luôn các giá trị v9 ở mỗi vòng for lần lượt là các số cần nhập vào là đã pass.\nTiếp theo, đề yêu cẩu lấy tổng các số vừa nhập xong md5 nó =\u0026gt; flag\n0 1 2 3 4 5  import hashlib s = 0 for i in range(0,5,1): s += 19753*(i+1) print(hashlib.md5(str(s).encode()).hexdigest())   FLAG uiuctf{627360eb8aa0da45ff04a514dab40e54}\rXem thêm và tải file đề bài tại Github\n","description":"Some write-ups of CTF contests that I solved before","id":0,"section":"posts","tags":["write-up","CTF","RE","rev"],"title":"Write-ups REV CTF","uri":"https://thunebae.github.io/en/posts/write-up/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":2,"section":"","tags":null,"title":"About","uri":"https://thunebae.github.io/en/about/"}]